---
title: "Distribución Poisson"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r setup, include=FALSE}
library(ggplot2)
library(dplyr)
library(knitr)
library(gridExtra)
library(patchwork)

```

## Introducción

La distribución de Poisson es una de las distribuciones de probabilidad discretas más importantes en estadística y tiene una amplia gama de aplicaciones en diversas disciplinas. Fue desarrollada por el matemático francés Siméon Denis Poisson en 1837 como una extensión del trabajo de Abraham de Moivre sobre la distribución binomial.

Esta distribución es especialmente útil para modelar el **número de eventos que ocurren en un intervalo fijo** de tiempo, espacio, volumen, o cualquier otra unidad de medida, cuando estos eventos:

-   Ocurren de manera **independiente**
-   Tienen una **tasa promedio constante**
-   Es **raro** que ocurran múltiples eventos simultáneamente

### Aplicaciones Comunes

La distribución de Poisson se utiliza frecuentemente para modelar:

-   **Llegadas de clientes** a un banco o restaurante por hora
-   **Llamadas telefónicas** recibidas en un centro de atención por minuto
-   **Defectos de fabricación** en un lote de productos
-   **Accidentes de tráfico** en una intersección por día
-   **Mutaciones genéticas** en una secuencia de ADN
-   **Partículas radioactivas** detectadas por un contador Geiger
-   **Terremotos** en una región geográfica por año

La distribución de Poisson también surge como **aproximación a la distribución binomial** cuando $n$ es grande y $p$ es pequeño, manteniendo $np$ constante.

## Definición

::: {#def-poisson}
Una variable aleatoria $X$ sigue una **distribución de Poisson** con parámetro $\lambda$ si cuenta el número de eventos que ocurren en un intervalo fijo, donde $\lambda$ representa la tasa promedio de ocurrencia de eventos en ese intervalo. La función de masa de probabilidad de la distribución de Poisson está dada por:

$$f(x)= \frac{\lambda^x e^{-\lambda}}{x!}$$

donde:

-   $x = 0, 1, 2, 3, \ldots$ (número entero no negativo de eventos)
-   $\lambda > 0$ (parámetro de tasa)
-   $e \approx 2.71828$ (base del logaritmo natural)

A una variable aleatoria que sigue esta distribución se le denota como $X \sim \text{Poisson}(\lambda)$
:::

## Características

**Parámetros**

La distribución de Poisson tiene un único parámetro:

-   $\lambda$ (lambda): Tasa promedio de eventos por unidad de medida ($\lambda > 0$)

    -   También representa tanto la media como la varianza de la distribución
    -   Es un número real positivo
    -   Sus unidades dependen del contexto (eventos/hora, defectos/lote, etc.)

**Parámetros Estadísticos**

Una característica notable de la distribución de Poisson es que su **media y varianza son iguales**:

Media (Esperanza):

$$E(X) = \lambda$$

Varianza:

$$\text{Var}(X) = \lambda$$

Desviación estándar:

$$\sigma = \sqrt{\lambda}$$

Coeficiente de variación:

$$CV = \frac{\sigma}{\mu} = \frac{\sqrt{\lambda}}{\lambda} = \frac{1}{\sqrt{\lambda}}$$

**Función de Distribución (Probabilidad Acumulada)**

La función de distribución acumulada (CDF) es:

$$F(x) = P(X \leq x) = \sum_{i=0}^{x} \frac{\lambda^i e^{-\lambda}}{i!}$$

Esta suma no tiene una forma cerrada simple, por lo que generalmente se calcula numéricamente o se consulta en tablas estadísticas.

## Ejemplo Básico

Un centro de atención telefónica recibe en promedio 4 llamadas por minuto. Suponiendo que las llamadas siguen un proceso de Poisson, responde las siguientes preguntas:

a)  ¿Cuál es la probabilidad de recibir exactamente 6 llamadas en un minuto?
b)  ¿Cuál es la probabilidad de no recibir ninguna llamada en un minuto?
c)  ¿Cuál es la probabilidad de recibir 3 o menos llamadas en un minuto?

**Identificación del modelo:**

-   Variable: $X$ = número de llamadas por minuto
-   Distribución: $X \sim \text{Poisson}(\lambda = 4)$

```{r ejemplo-basico}
# Parámetro
lambda <- 4

# a) P(X = 6)
prob_6 <- dpois(6, lambda)
cat("a) P(X = 6) =", round(prob_6, 4))

# Verificación manual
prob_6_manual <- (lambda^6 * exp(-lambda)) / factorial(6)
cat("\n   Verificación manual:", round(prob_6_manual, 4))

# b) P(X = 0)
prob_0 <- dpois(0, lambda)
cat("\n\nb) P(X = 0) =", round(prob_0, 4))

# c) P(X ≤ 3)
prob_3_o_menos <- ppois(3, lambda)
cat("\n\nc) P(X ≤ 3) =", round(prob_3_o_menos, 4))

# Verificación manual para c)
prob_3_manual <- sum(dpois(0:3, lambda))
cat("\n   Verificación manual:", round(prob_3_manual, 4))
```

**Interpretación de Resultados**

```{r interpretacion-ejemplo}

cat("a) La probabilidad de recibir exactamente 6 llamadas en un minuto es", 
    round(prob_6, 6), "\n")

cat("b) La probabilidad de no recibir ninguna llamada en un minuto es", 
    round(prob_0 , 6), "\n")

cat("c) La probabilidad de recibir 3 o menos llamadas en un minuto es", 
    round(prob_3_o_menos, 6), "\n\n")

# Estadísticas adicionales
media <- lambda
varianza <- lambda
desv_std <- sqrt(lambda)

cat("Estadísticas de la distribución:\n")
cat("Media:", media, "llamadas por minuto\n")
cat("Varianza:", varianza, "\n")
cat("Desviación estándar:", round(desv_std, 2), "llamadas por minuto\n")
```

**Gráfica de la Distribución del Ejemplo**

```{r grafico-ejemplo, fig.cap="Distribución de Poisson para el ejemplo (λ = 4)"}
# Valores para graficar
k_vals <- 0:12
prob_vals <- dpois(k_vals, lambda)

# Data frame para ggplot
data_ejemplo <- data.frame(k = k_vals, probabilidad = prob_vals)

# Resaltar los valores del ejemplo
data_ejemplo$color <- "Normal"
data_ejemplo$color[data_ejemplo$k == 6] <- "P(X = 6)"
data_ejemplo$color[data_ejemplo$k == 0] <- "P(X = 0)"
data_ejemplo$color[data_ejemplo$k <= 3] <- ifelse(data_ejemplo$color[data_ejemplo$k <= 3] == "Normal", 
                                                 "P(X ≤ 3)", data_ejemplo$color[data_ejemplo$k <= 3])

# Gráfico
ggplot(data_ejemplo, aes(x = k, y = probabilidad, fill = color)) +
  geom_col(alpha = 0.8, width = 0.7) +
  labs(title = "Distribución de Poisson: Llamadas Telefónicas",
       subtitle = "λ = 4 llamadas por minuto",
       x = "Número de llamadas (k)",
       y = "Probabilidad P(X = k)",
       fill = "Casos del ejemplo") +
  theme_minimal() +
  scale_fill_manual(values = c("Normal" = "#BDC3C7", 
                              "P(X = 6)" = "#E74C3C", 
                              "P(X = 0)" = "#3498DB",
                              "P(X ≤ 3)" = "#2ECC71")) +
  scale_x_continuous(breaks = k_vals) +
  theme(legend.position = "bottom")
```

## Comparación: Efecto del Parámetro $\lambda$

El parámetro $\lambda$ controla tanto la **posición central** como la **dispersión** de la distribución de Poisson.

```{r efecto-lambda, fig.cap="Efecto del parámetro λ en la distribución de Poisson"}
# Diferentes valores de lambda
lambda_values <- c(1, 3, 5, 10)

# Rango de k para cada lambda
k_max <- max(lambda_values) + 3 * sqrt(max(lambda_values))
k_vals <- 0:ceiling(k_max)

# Crear data frame para todos los valores
data_lambda <- expand.grid(k = k_vals, lambda = lambda_values)
data_lambda$probabilidad <- dpois(data_lambda$k, data_lambda$lambda)
data_lambda$lambda_label <- paste("λ =", data_lambda$lambda)
data_lambda$lambda_label <- factor(data_lambda$lambda_label, levels = c("λ = 1", "λ = 3", "λ = 5", "λ = 10"))


# Gráfico comparativo
ggplot(data_lambda, aes(x = k, y = probabilidad, fill = lambda_label)) +
  geom_col(alpha = 0.7, position = "identity") +
  facet_wrap(~lambda_label, scales = "free") +
  labs(title = "Efecto del Parámetro λ en la Distribución de Poisson",
       subtitle = "A mayor λ, la distribución se desplaza hacia la derecha y se dispersa más",
       x = "Número de eventos (k)",
       y = "Probabilidad P(X = k)") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_brewer(type = "qual", palette = "Set1")
```

**Comparación Superpuesta**

```{r comparacion-superpuesta, fig.cap="Comparación superpuesta de diferentes valores de λ"}
# Limitar k para mejor visualización
k_vals_plot <- 0:20

# Filtrar datos
data_plot <- data_lambda[data_lambda$k <= 20, ]

# Gráfico superpuesto
ggplot(data_plot, aes(x = k, y = probabilidad, color = lambda_label)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  labs(title = "Comparación de Distribuciones de Poisson",
       subtitle = "Diferentes valores del parámetro λ",
       x = "Número de eventos (k)",
       y = "Probabilidad P(X = k)",
       color = "Parámetro λ") +
  theme_minimal() +
  scale_color_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "bottom")
```

**Tabla Comparativa de Parámetros Estadísticos**

```{r tabla-parametros}
# Crear tabla con estadísticas para diferentes lambdas
lambdas_tabla <- c(0.5, 1, 2, 3, 5, 8, 10, 15)

tabla_stats <- data.frame(
  Lambda = lambdas_tabla,
  Media = lambdas_tabla,
  Varianza = lambdas_tabla,
  Desv_Std = sqrt(lambdas_tabla),
  CV = 1/sqrt(lambdas_tabla),
  P_X_eq_0 = dpois(0, lambdas_tabla)
)



kable(tabla_stats, digits = 4,
      caption = "Parámetros estadísticos para diferentes valores de λ",
      col.names = c("λ", "Media", "Varianza", "Desv. Std.", "CV", "P(X=0)"))
```

## Simulación de Valores Poisson y Comparación con la Teórica

Consideremos una simulación con $\lambda = 3.5$ y $n = 15,000$.

```{r simulacion-basica}
# Parámetros para la simulación
lambda <- 3.5
n_sim <- 15000

# Simulación de valores
set.seed(42)
valores_simulados <- rpois(n_sim, lambda)

# Estadísticas de la simulación
media_sim <- mean(valores_simulados)
var_sim <- var(valores_simulados)
sd_sim <- sd(valores_simulados)

# Valores teóricos
media_teorica <- lambda
var_teorica <- lambda
sd_teorica <- sqrt(lambda)

# Tabla comparativa
comparacion <- data.frame(
  Estadística = c("Media", "Varianza", "Desv. Estándar"),
  Teórica = c(media_teorica, var_teorica, sd_teorica),
  Simulada = c(media_sim, var_sim, sd_sim),
  Diferencia = c(abs(media_teorica - media_sim), 
                 abs(var_teorica - var_sim), 
                 abs(sd_teorica - sd_sim)),
  Error_Relativo = c(abs(media_teorica - media_sim)/media_teorica * 100,
                     abs(var_teorica - var_sim)/var_teorica * 100,
                     abs(sd_teorica - sd_sim)/sd_teorica * 100)
)

kable(comparacion, digits = 4, 
      caption = paste("Comparación teórica vs simulada (λ =", lambda, ", n =", format(n_sim, big.mark = ",")),
      col.names = c("Estadística", "Teórica", "Simulada", "Diferencia", "Error Rel. (%)"))
```

**Comparación Gráfica: Simulación vs Teórica**

```{r grafico-comparacion, fig.cap="Comparación entre distribución teórica y simulada de Poisson"}
# Rango de valores para comparar
k_max <- quantile(valores_simulados, 0.99)
k_vals <- 0:k_max

# Probabilidades teóricas
prob_teorica <- dpois(k_vals, lambda)

# Frecuencias relativas de la simulación
freq_tabla <- table(factor(valores_simulados, levels = k_vals))
freq_relativa <- as.numeric(freq_tabla) / n_sim

# Crear data frame para ggplot
data_comp <- data.frame(
  k = rep(k_vals, 2),
  Probabilidad = c(prob_teorica, freq_relativa),
  Tipo = rep(c("Teórica", "Simulada"), each = length(k_vals))
)

# Gráfico de barras comparativo
ggplot(data_comp, aes(x = k, y = Probabilidad, fill = Tipo)) +
  geom_col(position = "dodge", alpha = 0.7, width = 0.8) +
  scale_x_continuous(breaks = seq(0, k_max, by = 1)) +
  labs(title = "Distribución de Poisson: Teórica vs Simulada",
       subtitle = paste("λ =", lambda, ", n =", format(n_sim, big.mark = ",")),
       x = "Número de eventos (k)",
       y = "Probabilidad / Frecuencia relativa",
       fill = "Distribución") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_fill_manual(values = c("Teórica" = "#3498DB", "Simulada" = "#E74C3C")) 
  
```

## Verificación de la Suma de Variables Poisson Independientes

::: {#thm-suma-poisson}
Si $X_1 \sim \text{Poisson}(\lambda_1)$ y $X_2 \sim \text{Poisson}(\lambda_2)$ son independientes, entonces:

$$Y = X_1 + X_2 \sim \text{Poisson}(\lambda_1 + \lambda_2)$$

**Generalización:** Si $X_1, X_2, \ldots, X_n$ son variables Poisson independientes con parámetros $\lambda_1, \lambda_2, \ldots, \lambda_n$, entonces:

$$\sum_{i=1}^n X_i \sim \text{Poisson}\left(\sum_{i=1}^n \lambda_i\right)$$
:::

### Verificación por Simulación: Caso de Dos Variables

```{r suma-dos-poisson}
# Parámetros para las dos variables Poisson
lambda1 <- 2.5
lambda2 <- 4.2
lambda_suma <- lambda1 + lambda2
n_sim_suma <- 12000

set.seed(123)

# Método 1: Generar dos Poisson independientes y sumarlas
X1 <- rpois(n_sim_suma, lambda1)
X2 <- rpois(n_sim_suma, lambda2)
suma_simulada <- X1 + X2

# Método 2: Generar directamente de Poisson(λ₁ + λ₂)
poisson_directa <- rpois(n_sim_suma, lambda_suma)

# Comparar estadísticas
stats_suma <- data.frame(
  Método = c("X₁ + X₂ (Suma)", "Poisson Directa", "Teórico"),
  Media = c(mean(suma_simulada), mean(poisson_directa), lambda_suma),
  Varianza = c(var(suma_simulada), var(poisson_directa), lambda_suma),
  Desv_Std = c(sd(suma_simulada), sd(poisson_directa), sqrt(lambda_suma)),
  Min = c(min(suma_simulada), min(poisson_directa), 0),
  Max = c(max(suma_simulada), max(poisson_directa), NA)
)

kable(stats_suma, digits = 4,
      caption = paste("Verificación suma de Poisson (λ₁ =", lambda1, ", λ₂ =", lambda2, ")"))

# Información adicional
cat("\nPARÁMETROS INDIVIDUALES:\n")
cat("========================\n")
cat("X₁ ~ Poisson(", lambda1, "): E(X₁) =", lambda1, ", Var(X₁) =", lambda1, "\n")
cat("X₂ ~ Poisson(", lambda2, "): E(X₂) =", lambda2, ", Var(X₂) =", lambda2, "\n\n")

cat("SUMA TEÓRICA:\n")
cat("=============\n")
cat("Y = X₁ + X₂ ~ Poisson(", lambda_suma, ")\n")
cat("E[Y] = E(X₁) + E(X₂) =", lambda_suma, "\n")
cat("Var(Y) = Var(X₁) + Var(X₂) =", lambda_suma, " (por independencia)\n")
```

**Comparación Visual de las Distribuciones**

```{r comparacion-visual-suma, fig.cap="Comparación visual: Suma de Poisson vs Poisson directa"}
# Crear data frame para comparación
data_suma_comp <- data.frame(
  valores = c(suma_simulada, poisson_directa),
  metodo = rep(c("X1 + X2", "Poisson(λ1+λ2)"), each = n_sim_suma)
)

# Histogramas superpuestos
ggplot(data_suma_comp, aes(x = valores, fill = metodo)) +
  geom_histogram(alpha = 0.6, binwidth = 1, position = "dodge2", center =0) +
  scale_x_continuous(breaks = seq(0, max(c(suma_simulada, poisson_directa)), by = 1)) +
  labs(title = "Verificación de la Propiedad Aditiva de Poisson",
       subtitle = paste("λ1 =", lambda1, ", λ2 =", lambda2, ", λ1+λ2 =", lambda_suma),
       x = "Número de eventos",
       y = "Frecuencia",
       fill = "Método") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_fill_manual(values = c("X1 + X2" = "#3498DB", "Poisson(λ1+λ2)" = "#E74C3C"))
```

### Verificación con Múltiples Variables

```{r suma-multiples, fig.cap="Verificación con suma de múltiples variables Poisson"}
# Suma de 4 variables Poisson independientes
lambdas <- c(1.5, 2.0, 2.5, 3.0)
lambda_total <- sum(lambdas)
n_vars <- length(lambdas)

# Generar las variables individuales
variables_poisson <- matrix(0, nrow = n_sim_suma, ncol = n_vars)
for(i in 1:n_vars) {
  variables_poisson[, i] <- rpois(n_sim_suma, lambdas[i])
}

# Suma de las 4 variables
suma_multiple <- rowSums(variables_poisson)

# Poisson directa con λ total
poisson_multiple_directa <- rpois(n_sim_suma, lambda_total)

# Estadísticas comparativas
cat("VERIFICACIÓN CON", n_vars, "VARIABLES POISSON\n")
cat("λ₁ =", lambdas[1], ", λ₂ =", lambdas[2], ", λ₃ =", lambdas[3], ", λ₄ =", lambdas[4], "\n")
cat("λ_total =", lambda_total, "\n\n")

stats_multiple <- data.frame(
  Distribución = c("Suma de 4 Poisson", "Poisson(λ_total)", "Diferencia"),
  Media = c(mean(suma_multiple), mean(poisson_multiple_directa), 
            abs(mean(suma_multiple) - mean(poisson_multiple_directa))),
  Varianza = c(var(suma_multiple), var(poisson_multiple_directa),
               abs(var(suma_multiple) - var(poisson_multiple_directa)))
)

kable(stats_multiple, digits = 4, 
      caption = "Estadísticas para suma de múltiples variables Poisson")

# Visualización
data_multiple <- data.frame(
  valores = c(suma_multiple, poisson_multiple_directa),
  tipo = rep(c("Suma de 4 Poisson", "Poisson(λ_total)"), each = n_sim_suma)
)

ggplot(data_multiple, aes(x = valores, fill = tipo)) +
  geom_histogram(alpha = 0.6, binwidth = 1, center=0, position = "dodge2") +
  scale_x_continuous(breaks = seq(0, max(c(suma_multiple, poisson_multiple_directa)), by = 1)) +
  labs(title = "Suma de Múltiples Variables Poisson",
       subtitle = paste("λ_total =", lambda_total),
       x = "Número de eventos",
       y = "Frecuencia",
       fill = "Tipo") +
  theme_minimal() +
  scale_fill_manual(values = c("#2ECC71", "#F39C12"))
```

## Teorema Central del Límite con Variables Poisson

**Configuración del Experimento**

Consideremos una variable aleatoria $X \sim \text{Poisson}(\lambda = 3)$. Vamos a generar múltiples muestras de diferentes tamaños y observar cómo se comporta la distribución de la media muestral $\bar{X}$.

**Teoría esperada:** 

- Para muestras de tamaño $n$ de $X \sim \text{Poisson}(\lambda)$ 
- $\bar{X} \sim N\left(\lambda, \frac{\lambda}{n}\right)$ cuando $n$ es grande 
- $E(\bar{X}) = \lambda$ y $\text{Var}(\bar{X}) = \frac{\lambda}{n}$

```{r configuracion-tcl}
# Parámetros del experimento
lambda_tcl <- 3
tamaños_muestra <- c(5, 10, 25, 50, 100)
num_muestras <- 2000

cat("CONFIGURACIÓN DEL EXPERIMENTO\n")
cat("=============================\n")
cat("Distribución original: Poisson(λ =", lambda_tcl, ")\n")
cat("Tamaños de muestra:", paste(tamaños_muestra, collapse = ", "), "\n")
cat("Número de muestras por tamaño:", num_muestras, "\n\n")

cat("Parámetros teóricos de la distribución original:\n")
cat("E[X] =", lambda_tcl, "\n")
cat("Var(X) =", lambda_tcl, "\n")
cat("SD(X) =", round(sqrt(lambda_tcl), 3), "\n")
```

**Generación de Muestras y Cálculo de Medias**

```{r generacion-muestras}
# Función para generar medias muestrales
generar_medias_muestrales <- function(n, num_muestras, lambda) {
  medias <- numeric(num_muestras)
  for(i in 1:num_muestras) {
    muestra <- rpois(n, lambda)
    medias[i] <- mean(muestra)
  }
  return(medias)
}

# Generar medias para cada tamaño de muestra
set.seed(123)
medias_muestrales <- list()

for(i in seq_along(tamaños_muestra)) {
  n <- tamaños_muestra[i]
  medias_muestrales[[i]] <- generar_medias_muestrales(n, num_muestras, lambda_tcl)
  names(medias_muestrales)[i] <- paste("n", n, sep = "_")
}

# Crear data frame para análisis
data_tcl <- do.call(rbind, lapply(seq_along(medias_muestrales), function(i) {
  data.frame(
    media_muestral = medias_muestrales[[i]],
    n = tamaños_muestra[i],
    n_label = paste("n =", tamaños_muestra[i])
  )
}))

data_tcl$n_label <- factor(data_tcl$n_label, levels = c("n = 5", "n = 10", "n = 25", "n = 50", "n = 100"))

cat("Muestras generadas exitosamente.\n")
cat("Total de observaciones:", nrow(data_tcl), "\n")
```

**Verificación de Convergencia de Media y Varianza**

```{r verificacion-convergencia}
# Calcular estadísticas para cada tamaño de muestra
estadisticas_tcl <- data.frame(
  n = tamaños_muestra,
  Media_Observada = sapply(medias_muestrales, mean),
  Media_Teorica = rep(lambda_tcl, length(tamaños_muestra)),
  Var_Observada = sapply(medias_muestrales, var),
  Var_Teorica = lambda_tcl / tamaños_muestra,
  SD_Observada = sapply(medias_muestrales, sd),
  SD_Teorica = sqrt(lambda_tcl / tamaños_muestra)
)

# Calcular errores

estadisticas_tcl <- estadisticas_tcl |> mutate(
  Error_Media = abs(Media_Observada - Media_Teorica),
  Error_Var = abs(Var_Observada - Var_Teorica),
  Error_SD = abs(SD_Observada - SD_Teorica))

kable(estadisticas_tcl, digits = 4,
      caption = "Convergencia de estadísticos de la media muestral",
      col.names = c("n", "Media Obs.", "Media Teór.", "Var. Obs.", "Var. Teór.", 
                   "SD Obs.", "SD Teór.", "Error Media", "Error Var.", "Error SD"))

```

**Visualización de la Convergencia**

```{r visualizacion-convergencia, fig.cap="Distribución de medias muestrales para diferentes tamaños de muestra"}
# Histogramas de las medias muestrales
ggplot(data_tcl, aes(x = media_muestral)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, alpha = 0.7, fill = "#3498DB") +
  geom_vline(xintercept = lambda_tcl, color = "#E74C3C", linetype = "dashed", linewidth = 1) +
  facet_wrap(~n_label, scales = "free_y") +
  labs(title = "Distribución de Medias Muestrales (TCL)",
       subtitle = paste("Distribución original: Poisson(λ =", lambda_tcl, "). Línea roja: media teórica"),
       x = "Media muestral",
       y = "Densidad") +
  theme_minimal()
```

```{r comparacion-con-normal, fig.cap="Comparación con distribución normal teórica"}
# Agregar curvas normales específicas para cada panel
data_tcl_split <- split(data_tcl, data_tcl$n_label)

plots_comparacion <- lapply(names(data_tcl_split), function(label) {
  datos <- data_tcl_split[[label]]
  n_val <- unique(datos$n)
  
  ggplot(datos, aes(x = media_muestral)) +
    geom_histogram(aes(y = after_stat(density)), bins = 25, alpha = 0.6, fill = "#3498DB") +
    stat_function(fun = dnorm, 
                  args = list(mean = lambda_tcl, sd = sqrt(lambda_tcl/n_val)), 
                  color = "#E74C3C", linewidth = 1.2) +
    ggtitle(label) +
    xlab("Media muestral") +
    ylab("Densidad") +
    theme_minimal()
})

# Combinar gráficos
do.call(grid.arrange, c(plots_comparacion, ncol = 3))
```

## Aplicaciones de la Distribución de Poisson

### Gestión de Tráfico de Red

**Contexto:** Una empresa de telecomunicaciones monitorea el tráfico de datos en sus servidores. El número de paquetes de datos que llegan por segundo sigue una distribución de Poisson.

```{r aplicacion-trafico}
# Parámetros del problema
lambda_trafico <- 8.5  # 8.5 paquetes por segundo en promedio

cat("APLICACIÓN 1: TRÁFICO DE RED\n")
cat("============================\n")
cat("Parámetro: λ =", lambda_trafico, "paquetes por segundo\n\n")

# Preguntas típicas
cat("ANÁLISIS DEL TRÁFICO:\n")

# 1. Probabilidad de recibir exactamente 10 paquetes en un segundo
prob_10 <- dpois(10, lambda_trafico)
cat("1. P(X = 10 paquetes) =", round(prob_10, 4), "(", round(prob_10*100, 2), "%)\n")

# 2. Probabilidad de recibir más de 12 paquetes
prob_mas_12 <- 1 - ppois(12, lambda_trafico)
cat("2. P(X > 12 paquetes) =", round(prob_mas_12, 4), "(", round(prob_mas_12*100, 2), "%)\n")

# 3. Número esperado de paquetes en 5 segundos
# En 5 segundos: Y ~ Poisson(5λ)
lambda_5seg <- 5 * lambda_trafico
paquetes_5seg_esperados <- lambda_5seg
cat("3. Paquetes esperados en 5 segundos =", paquetes_5seg_esperados, "\n")

# 4. Probabilidad de sobrecarga (más de 15 paquetes por segundo)
prob_sobrecarga <- 1 - ppois(15, lambda_trafico)
cat("4. P(Sobrecarga) = P(X > 15) =", round(prob_sobrecarga, 4), "\n")

# Simulación para verificar
set.seed(456)
n_sim_trafico <- 10000
sim_paquetes <- rpois(n_sim_trafico, lambda_trafico)

cat("\nVERIFICACIÓN POR SIMULACIÓN (n =", format(n_sim_trafico, big.mark = ","), "):\n")
cat("Media simulada:", round(mean(sim_paquetes), 3), "(teórica:", lambda_trafico, ")\n")
cat("P(X = 10) simulada:", round(mean(sim_paquetes == 10), 4), "(teórica:", round(prob_10, 4), ")\n")
cat("P(X > 15) simulada:", round(mean(sim_paquetes > 15), 4), "(teórica:", round(prob_sobrecarga, 4), ")\n")
```

```{r grafico-trafico, fig.cap="Distribución del tráfico de red y zonas críticas"}
# Visualización del problema de tráfico
k_trafico <- 0:20
prob_trafico <- dpois(k_trafico, lambda_trafico)

data_trafico <- data.frame(
  paquetes = k_trafico,
  probabilidad = prob_trafico
)

# Definir zonas
data_trafico$zona <- case_when(
  data_trafico$paquetes <= 5 ~ "Bajo",
  data_trafico$paquetes <= 12 ~ "Normal", 
  data_trafico$paquetes <= 15 ~ "Alto",
  TRUE ~ "Sobrecarga"
)

ggplot(data_trafico, aes(x = paquetes, y = probabilidad, fill = zona)) +
  geom_col(alpha = 0.8) +
  labs(title = "Distribución del Tráfico de Red por Segundo",
       subtitle = paste("λ =", lambda_trafico, "paquetes/segundo"),
       x = "Número de paquetes",
       y = "Probabilidad",
       fill = "Zona de tráfico") +
  theme_minimal() +
  scale_fill_manual(values = c("Bajo" = "#2ECC71", "Normal" = "#3498DB", 
                              "Alto" = "#F39C12", "Sobrecarga" = "#E74C3C"))
```

### Control de Calidad Industrial

**Contexto:** Una fábrica de semiconductores monitorea defectos en sus productos. El número de defectos por lote sigue una distribución de Poisson.

```{r aplicacion-calidad}
# Parámetros del control de calidad
lambda_defectos <- 2.3  # 2.3 defectos por lote en promedio

cat("APLICACIÓN 2: CONTROL DE CALIDAD\n")
cat("================================\n")
cat("Parámetro: λ =", lambda_defectos, "defectos por lote\n\n")

# Análisis de calidad
cat("ANÁLISIS DE CONTROL DE CALIDAD:\n")

# 1. Probabilidad de lote perfecto (0 defectos)
prob_perfecto <- dpois(0, lambda_defectos)
cat("1. P(Lote perfecto) = P(X = 0) =", round(prob_perfecto, 4), "(", round(prob_perfecto*100, 1), "%)\n")

# 2. Probabilidad de lote aceptable (≤ 3 defectos)
prob_aceptable <- ppois(3, lambda_defectos)
cat("2. P(Lote aceptable) = P(X ≤ 3) =", round(prob_aceptable, 4), "(", round(prob_aceptable*100, 1), "%)\n")

# 3. Probabilidad de rechazo (> 5 defectos)
prob_rechazo <- 1 - ppois(5, lambda_defectos)
cat("3. P(Rechazo) = P(X > 5) =", round(prob_rechazo, 4), "(", round(prob_rechazo*100, 1), "%)\n")

# 4. Análisis económico
costo_defecto <- 50  # $50 por defecto
defectos_esperados <- lambda_defectos
costo_esperado_lote <- defectos_esperados * costo_defecto
cat("4. Costo esperado por defectos por lote: $", costo_esperado_lote, "\n")

# 5. Análisis de múltiples lotes
n_lotes <- 100
lambda_total <- n_lotes * lambda_defectos
cat("5. Defectos esperados en", n_lotes, "lotes:", lambda_total, "\n")

```

```{r simulacion-calidad, fig.cap="Simulación del proceso de control de calidad"}
# Simulación del proceso de control de calidad
set.seed(789)
n_lotes_sim <- 1000
lotes_simulados <- rpois(n_lotes_sim, lambda_defectos)

# Clasificar lotes
clasificacion <- case_when(
  lotes_simulados == 0 ~ "Perfecto",
  lotes_simulados <= 3 ~ "Aceptable",
  lotes_simulados <= 5 ~ "Revisión",
  TRUE ~ "Rechazo"
)

# Crear data frame para visualización
data_calidad <- data.frame(
  defectos = lotes_simulados,
  clasificacion = factor(clasificacion, 
                        levels = c("Perfecto", "Aceptable", "Revisión", "Rechazo"))
)

# Gráfico de la simulación
ggplot(data_calidad, aes(x = defectos, fill = clasificacion)) +
  geom_histogram(bins = 15, alpha = 0.8, position = "stack") +
  labs(title = "Simulación de Control de Calidad",
       subtitle = paste("n =", format(n_lotes_sim, big.mark = ","), "lotes simulados"),
       x = "Número de defectos por lote",
       y = "Frecuencia",
       fill = "Clasificación") +
  theme_minimal() +
  scale_fill_manual(values = c("Perfecto" = "#2ECC71", "Aceptable" = "#3498DB",
                              "Revisión" = "#F39C12", "Rechazo" = "#E74C3C"))

# Tabla de resultados de la simulación
tabla_clasificacion <- table(clasificacion)
prop_clasificacion <- prop.table(tabla_clasificacion)

cat("\nRESULTADOS DE LA SIMULACIÓN:\n")
cat("============================\n")
for(i in 1:length(tabla_clasificacion)) {
  cat(names(tabla_clasificacion)[i], ":", tabla_clasificacion[i], 
      "lotes (", round(prop_clasificacion[i]*100, 1), "%)\n")
}
```

### Epidemiología y Salud Pública

**Contexto:** Un epidemiólogo estudia la incidencia de una enfermedad rara en una población. Los nuevos casos por semana siguen una distribución de Poisson.

```{r aplicacion-epidemiologia}
# Parámetros epidemiológicos
lambda_casos <- 4.2  # 4.2 casos nuevos por semana en promedio

cat("APLICACIÓN 3: EPIDEMIOLOGÍA\n")
cat("===========================\n")
cat("Parámetro: λ =", lambda_casos, "casos nuevos por semana\n\n")

cat("ANÁLISIS EPIDEMIOLÓGICO:\n")

# 1. Probabilidad de semana sin casos nuevos
prob_sin_casos <- dpois(0, lambda_casos)
cat("1. P(Semana sin casos) =", round(prob_sin_casos, 4), "(", round(prob_sin_casos*100, 1), "%)\n")

# 2. Probabilidad de brote (más de 8 casos)
prob_brote <- 1 - ppois(8, lambda_casos)
cat("2. P(Brote) = P(X > 8) =", round(prob_brote, 4), "(", round(prob_brote*100, 1), "%)\n")

# 3. Casos esperados en un mes (4 semanas)
casos_mes <- 4 * lambda_casos
cat("3. Casos esperados en un mes:", casos_mes, "\n")

# 4. Análisis de intervención
# Si una intervención reduce λ en 30%
lambda_intervencion <- lambda_casos * 0.7
reduccion_casos_mes <- (lambda_casos - lambda_intervencion) * 4
cat("4. Con intervención (reducción 30%):\n")
cat("   Nuevos casos esperados por semana:", lambda_intervencion, "\n")
cat("   Reducción esperada por mes:", reduccion_casos_mes, "casos\n")

# 5. Monitoreo de alertas
umbral_alerta <- 7
prob_alerta <- 1 - ppois(umbral_alerta - 1, lambda_casos)
cat("5. P(Alerta) = P(X ≥", umbral_alerta, ") =", round(prob_alerta, 4), "\n")
```

```{r visualizacion-epidemiologia, fig.cap="Análisis epidemiológico con y sin intervención"}
# Comparación antes y después de intervención
k_epi <- 0:15
prob_antes <- dpois(k_epi, lambda_casos)
prob_despues <- dpois(k_epi, lambda_intervencion)

data_epi <- data.frame(
  casos = rep(k_epi, 2),
  probabilidad = c(prob_antes, prob_despues),
  escenario = rep(c("Sin intervención", "Con intervención"), each = length(k_epi))
)

ggplot(data_epi, aes(x = casos, y = probabilidad, fill = escenario)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_vline(xintercept = umbral_alerta - 0.5, linetype = "dashed", color = "red") +
  labs(title = "Impacto de Intervención en Salud Pública",
       subtitle = paste("Reducción del 30% en la incidencia (λ:", lambda_casos, "→", lambda_intervencion, ")"),
       x = "Número de casos nuevos por semana",
       y = "Probabilidad",
       fill = "Escenario",
       caption = "Línea roja: umbral de alerta") +
  theme_minimal() +
  scale_fill_manual(values = c("Sin intervención" = "#E74C3C", "Con intervención" = "#2ECC71"))
```

## Ejercicios Propuestos

::: {#exr-centro-atencion}
Un centro de atención telefónica recibe llamadas siguiendo una distribución de Poisson con una tasa promedio de 6 llamadas por minuto.

**Preguntas:**


a)  ¿Cuál es la probabilidad de recibir exactamente 4 llamadas en un minuto?


b)  ¿Cuál es la probabilidad de no recibir ninguna llamada en 30 segundos?


c)  ¿Cuál es el número esperado de llamadas en una hora?


d)  ¿Cuál es la probabilidad de recibir entre 8 y 12 llamadas (inclusive) en dos minutos?


```{r}
# Parámetros
lambda_minuto <- 6

# a) Probabilidad de recibir exactamente 4 llamadas en un minuto
prob_4 <- dpois(4, lambda_minuto)
cat("a) P(X = 4) =", round(prob_4, 6), "\n")

# Verificación manual para a)
prob_4_manual <- (lambda_minuto^4 * exp(-lambda_minuto)) / factorial(4)
cat("   Verificación manual:", round(prob_4_manual, 6), "\n\n")

# b) Probabilidad de no recibir ninguna llamada en 30 segundos
lambda_30_segundos <- lambda_minuto * 0.5
prob_0_30s <- dpois(0, lambda_30_segundos)
cat("b) P(X = 0) en 30 segundos =", round(prob_0_30s, 6), "\n\n")

# c) Número esperado de llamadas en una hora
esperado_hora <- lambda_minuto * 60
cat("c) Número esperado de llamadas en una hora =", esperado_hora, "\n\n")

# d) Probabilidad de recibir entre 8 y 12 llamadas (inclusive) en dos minutos
lambda_dos_minutos <- lambda_minuto * 2
prob_8_12 <- sum(dpois(8:12, lambda_dos_minutos))
cat("d) P(8 ≤ X ≤ 12) en dos minutos =", round(prob_8_12, 6), "\n")


```



**Interpretación de Resultados**

```{r}
cat("a) Probabilidad de recibir exactamente 4 llamadas en un minuto es",
round(prob_4, 6), "\n")


cat("b) Probabilidad de no recibir ninguna llamada en 30 segundos es",
    round(prob_0_30s, 6), "\n\n")

cat("c) Número esperado de llamadas en una hora es",
    esperado_hora, "\n\n")

cat("d) Probabilidad de recibir entre 8 y 12 llamadas (inclusive) en dos minutos es",
    round(prob_8_12, 6), "\n")


```

```{r}
# Estadísticas adicionales
media <- lambda
varianza <- lambda
desv_std <- sqrt(lambda)

cat("Estadísticas de la distribución:\n")
cat("Media:", media, "llamadas por minuto\n")
cat("Varianza:", varianza, "\n")
cat("Desviación estándar:", round(desv_std, 2), "llamadas por minuto\n")

```

**Gráfica de la Distribución del Ejemplo**

```{r grafico-ejemplo, fig.cap="Distribución de Poisson para el ejemplo (λ = 6)"}
library(ggplot2)

# Definición de parámetros
lambda <- 6
lambda_30s <- lambda * 0.5
lambda_2min <- lambda * 2

# Valores para graficar
k_vals <- 0:12
prob_vals <- dpois(k_vals, lambda)

# Data frame para ggplot
data_ejemplo <- data.frame(k = k_vals, probabilidad = prob_vals)

# Resaltar los valores del ejemplo
data_ejemplo$color <- "Normal"
data_ejemplo$color[data_ejemplo$k == 4] <- "P(X = 4)"
# Agregar fila para P(X=0) en 30 segundos
data_ejemplo <- rbind(data_ejemplo,
                      data.frame(k = 0, probabilidad = dpois(0, lambda_30s), color = "P(X = 0 en 30 seg)"))
# Resaltar rango 8 a 12 para dos minutos
data_ejemplo$color[data_ejemplo$k >= 8 & data_ejemplo$k <= 12] <- "P(8 ≤ X ≤ 12 en 2 min)"

# Convertir color a factor con niveles ordenados
data_ejemplo$color <- factor(data_ejemplo$color, levels = c("Normal", "P(X = 4)",
                                                          "P(X = 0 en 30 seg)", "P(8 ≤ X ≤ 12 en 2 min)"))

# Gráfico
ggplot(data_ejemplo, aes(x = k, y = probabilidad, fill = color)) +
  geom_col(alpha = 0.8, width = 0.7) +
  labs(title = "Distribución de Poisson: Llamadas Telefónicas",
       subtitle = "λ = 6 llamadas por minuto",
       x = "Número de llamadas (k)",
       y = "Probabilidad P(X = k)",
       fill = "Casos del ejemplo") +
  theme_minimal() +
  scale_fill_manual(values = c("Normal" = "#BDC", 
                              "P(X = 4)" = "#E13675", 
                              "P(X = 0 en 30 seg)" = "#456313",
                              "P(8 ≤ X ≤ 12 en 2 min)" = "#2E1662")) +
  scale_x_continuous(breaks = k_vals) +
  theme(legend.position = "bottom")

```

:::


::: {#exr-linea_prod}
Una línea de producción tiene en promedio 1.5 defectos por cada 100 productos fabricados.

**Preguntas:**

a)  Si se fabrican 500 productos, ¿cuál es la probabilidad de tener exactamente 8 defectos?

b)  ¿Cuál es la probabilidad de tener 10 o más defectos en 500 productos?

c)  ¿Cuántos productos se deben fabricar para que la probabilidad de tener al menos un defecto sea de 0.95?

d)  Si la empresa mejora el proceso y reduce los defectos a 1.2 por cada 100 productos, ¿cuál sería la nueva probabilidad de tener 10 o más defectos en 500 productos?


```{r}

# Parámetros iniciales
defectos_por_100 <- 1.5

# a) Para 500 productos
n_productos <- 500
lambda_a <- defectos_por_100 * (n_productos / 100)  # tasa promedio ajustada a 500 prod

# Probabilidad exactamente 8 defectos
prob_8 <- dpois(8, lambda_a)
cat("a) P(X = 8) =", round(prob_8, 4), "\n")

# b) Probabilidad de 10 o más defectos
prob_10_mas <- 1 - ppois(9, lambda_a)
cat("b) P(X >= 10) =", round(prob_10_mas, 4), "\n")

# c) Número de productos para que P(al menos 1 defecto) = 0.95
# P(al menos 1) = 1 - P(0) = 0.95 -> P(0) = 0.05
# P(0) = exp(-lambda) -> lambda = -ln(0.05)
lambda_c <- -log(0.05)
# lambda = tasa * (n/cien) => n = lambda / tasa * 100
n_productos_c <- (lambda_c / defectos_por_100) * 100
cat("c) Productos necesarios para que P(al menos un defecto) = 0.95: ", round(n_productos_c, 0), "\n")

# d) Nueva tasa defectuosa = 1.2 por 100 productos para 500 productos
defectos_por_100_nuevo <- 1.2
lambda_d <- defectos_por_100_nuevo * (n_productos / 100)


```
**Interpretación de Resultados**


```{r}


cat("a) Para 500 productos es",
    round(prob_8, 4), "\n")


cat("b) Probabilidad de 10 o más defectos es",
    round(prob_10_mas, 4), "\n")


cat("c) Productos necesarios para que P(al menos un defecto) es de", 
    round(n_productos_c, 0), "\n")


```







```{r}
# Probabilidad de 10 o más defectos con nuevo lambda
prob_10_mas_nuevo <- 1 - ppois(9, lambda_d)
cat("d) Nueva P(X >= 10) =", round(prob_10_mas_nuevo, 4), "\n")

# Opcional: visualización similar al ejemplo anterior (a)
k_vals <- 0:15
prob_vals <- dpois(k_vals, lambda_a)

data_ejemplo <- data.frame(k = k_vals, probabilidad = prob_vals)

data_ejemplo$color <- "Normal"
data_ejemplo$color[data_ejemplo$k == 8] <- "P(X = 8)"
data_ejemplo$color[data_ejemplo$k >= 10] <- "P(X >= 10)"
data_ejemplo$color <- factor(data_ejemplo$color, levels = c("Normal", "P(X = 8)", "P(X >= 10)"))

ggplot(data_ejemplo, aes(x = k, y = probabilidad, fill = color)) +
  geom_col(alpha = 0.8, width = 0.7) +
  labs(title = "Distribución de Poisson: Defectos en Producción",
       subtitle = paste("λ =", round(lambda_a, 2), "defectos en 500 productos"),
       x = "Número de defectos (k)",
       y = "Probabilidad P(X = k)",
       fill = "Casos") +
  theme_minimal() +
  scale_fill_manual(values = c("Normal" = "#BDC",
                              "P(X = 8)" = "#E74",
                              "P(X >= 10)" = "#349")) +
  scale_x_continuous(breaks = k_vals) +
  theme(legend.position = "bottom")

```


```{r}
library(ggplot2)

# Parámetros
defectos_por_100 <- 1.5

# a) Para 500 productos: tasa ajustada λ
n_productos <- 500
lambda_a <- defectos_por_100 * (n_productos / 100)  # 1.5 * 5 = 7.5

# Probabilidad exactamente 8 defectos
prob_8 <- dpois(8, lambda_a)
cat("a) P(X = 8) =", round(prob_8, 4), "\n")

# b) Probabilidad de 10 o más defectos
prob_10_mas <- 1 - ppois(9, lambda_a)
cat("b) P(X >= 10) =", round(prob_10_mas, 4), "\n")

# c) Número de productos para que P(al menos 1 defecto) = 0.95
# P(al menos 1) = 1 - P(0) = 0.95 → P(0) = 0.05
# P(0) = e^(-λ) → λ = -log(0.05)
lambda_c <- -log(0.05)
# λ = defectos_por_100 * (n / 100) → n = λ / defectos_por_100 * 100
n_productos_c <- (lambda_c / defectos_por_100) * 100
cat("c) Productos necesarios para P(al menos un defecto)=0.95:", round(n_productos_c,0), "\n")

# d) Nueva tasa defectuosa y probabilidad de 10 o más defectos en 500 productos
defectos_por_100_nuevo <- 1.2
lambda_d <- defectos_por_100_nuevo * (n_productos / 100)
prob_10_mas_nuevo <- 1 - ppois(9, lambda_d)
cat("d) Nueva P(X >= 10) =", round(prob_10_mas_nuevo, 4), "\n")


```

```{r}
# Gráfica de la distribución para 500 productos con λ original
k_vals <- 0:15
prob_vals <- dpois(k_vals, lambda_a)
data_ejemplo <- data.frame(k = k_vals, probabilidad = prob_vals)

data_ejemplo$color <- "Normal"
data_ejemplo$color[data_ejemplo$k == 8] <- "P(X = 8)"
data_ejemplo$color[data_ejemplo$k >= 10] <- "P(X >= 10)"
data_ejemplo$color <- factor(data_ejemplo$color, levels = c("Normal", "P(X = 8)", "P(X >= 10)"))

ggplot(data_ejemplo, aes(x = k, y = probabilidad, fill = color)) +
  geom_col(alpha = 0.8, width = 0.7) +
  labs(title = "Distribución de Poisson: Defectos en Producción",
       subtitle = paste("λ =", round(lambda_a, 2), "defectos en 500 productos"),
       x = "Número de defectos (k)",
       y = "Probabilidad P(X = k)",
       fill = "Casos") +
  theme_minimal() +
  scale_fill_manual(values = c("Normal" = "#BDC398",
                              "P(X = 8)" = "#E74C3230",
                              "P(X >= 10)" = "#349123")) +
  scale_x_continuous(breaks = k_vals) +
  theme(legend.position = "bottom")

```


:::

::: {#exr-hospital}
El servicio de urgencias de un hospital recibe pacientes según un proceso de Poisson con una tasa promedio de 2.5 pacientes por hora durante la noche.

**Preguntas:**

a)  ¿Cuál es la probabilidad de que lleguen exactamente 3 pacientes en una hora?

b)  ¿Cuál es la probabilidad de que no llegue ningún paciente en 2 horas consecutivas?

c)  El hospital tiene capacidad para atender 8 pacientes por turno de 4 horas. ¿Cuál es la probabilidad de superar esta capacidad?

d)  ¿Cuál debería ser la capacidad mínima para que la probabilidad de saturación sea menor al 10% en un turno de 4 horas?

```{r}

lambda_hora <- 2.5

prob_3 <- dpois(3, lambda_hora)
lambda_2h <- lambda_hora * 2
prob_0_2h <- dpois(0, lambda_2h)
lambda_4h <- lambda_hora * 4
prob_superar_8 <- 1 - ppois(8, lambda_4h)
k_min <- qpois(0.90, lambda_4h)

k_vals <- 0:(k_min + 5)
prob_vals <- dpois(k_vals, lambda_4h)
data_ejemplo <- data.frame(k = k_vals, probabilidad = prob_vals)

data_ejemplo$color <- "Normal"
data_ejemplo$color[data_ejemplo$k == 3] <- "P(X = 3 en 1 hora)"
data_ejemplo$color[data_ejemplo$k == 0] <- "P(X = 0 en 2 horas)"
data_ejemplo$color[data_ejemplo$k > 8] <- "P(X > 8 en 4 horas)"
data_ejemplo$color[data_ejemplo$k == k_min] <- "Capacidad mínima"

data_ejemplo$color <- factor(data_ejemplo$color, levels = c("Normal",
                                                          "P(X = 3 en 1 hora)",
                                                          "P(X = 0 en 2 horas)",
                                                          "P(X > 8 en 4 horas)",
                                                          "Capacidad mínima"))

ggplot(data_ejemplo, aes(x = k, y = probabilidad, fill = color)) +
  geom_col(alpha = 0.8, width = 0.7) +
  labs(title = "Distribución de Poisson: Pacientes en Servicio de Urgencias",
       subtitle = paste("λ =", lambda_4h, "pacientes en 4 horas"),
       x = "Número de pacientes (k)",
       y = "Probabilidad P(X = k)",
       fill = "Casos") +
  theme_minimal() +
  scale_fill_manual(values = c("Normal" = "#BDC3C7",
                              "P(X = 3 en 1 hora)" = "#E74C3C",
                              "P(X = 0 en 2 horas)" = "#3498DB",
                              "P(X > 8 en 4 horas)" = "#2ECC71",
                              "Capacidad mínima" = "#9B59B6")) +
  scale_x_continuous(breaks = k_vals) +
  theme(legend.position = "bottom")

```


:::

::: {#exr-tcl_poisson}
Implementa una verificación completa del Teorema Central del Límite para una distribución Poisson con $\lambda = 7$.


```{r}
#| code-fold: true
#| label: verificacion_TCL_poisson

# Parámetro de la distribución Poisson
lambda <- 7

# Tamaño de cada muestra
n <- 30

# Número de repeticiones (muestras)
num_muestras <- 10000

# Simular medias muestrales
set.seed(123)
medias <- replicate(num_muestras, mean(rpois(n, lambda)))

# Media y desviación estándar teóricas
media_teorica <- lambda
sd_teorica <- sqrt(lambda / n)

# Crear data frame para graficar
df <- data.frame(Media_Muestral = medias)

# Graficar histograma con curva normal teórica
ggplot(df, aes(x = Media_Muestral)) +
  geom_histogram(aes(y = ..density..), bins = 50, fill = "steelblue", alpha = 0.7) +
  stat_function(fun = dnorm, args = list(mean = media_teorica, sd = sd_teorica),
                color = "red", linewidth = 1.2) +
  labs(title = "Verificación del Teorema Central del Límite",
       subtitle = "Distribución de medias muestrales (Poisson λ = 7, n = 30)",
       x = "Media muestral",
       y = "Densidad") +
  theme_minimal()

```




:::

::: {#exr-prop_aditiva}
Verifica por simulación que si $X_1 \sim \text{Poisson}(3.5)$ y $X_2 \sim \text{Poisson}(2.8)$ son independientes, entonces $X_1 + X_2 \sim \text{Poisson}(6.3)$.

**Pasos específicos:**

a)  Generar 10,000 muestras de cada distribución y calcule su suma
b)  Comparar las estadísticas de la suma con una Poisson(6.3) directa
c)  Extienda la verificación a la suma de 4 variables Poisson independientes

```{r}
#| code-fold: true
#| label: verificacion_aditividad_poisson

# a) Generar 10,000 muestras de X1 ~ Poisson(3.5) y X2 ~ Poisson(2.8)
set.seed(123)
n <- 10000
X1 <- rpois(n, lambda = 3.5)
X2 <- rpois(n, lambda = 2.8)

# Suma de las dos variables
Suma_2 <- X1 + X2

# b) Generar 10,000 muestras de Poisson(6.3) directamente
X_directa <- rpois(n, lambda = 6.3)

# Comparar estadísticas
media_suma <- mean(Suma_2)
var_suma <- var(Suma_2)

media_directa <- mean(X_directa)
var_directa <- var(X_directa)

# Mostrar resultados
cat("suma X1 + X2:", round(media_suma, 4), "\n")
cat("Varianza de la suma X1 + X2:", round(var_suma, 4), "\n\n")

cat("Poisson(6.3):", round(media_directa, 4), "\n")
cat("Varianza Poisson(6.3):", round(var_directa, 4), "\n")

```

```{r}
# VIsualizar la comparativa 
df <- data.frame(
  Valor = c(Suma_2, X_directa),
  Tipo = rep(c("Suma X1 + X2", "Poisson(6.3)"), each = n)
)

# Graficar histogramas
ggplot(df, aes(x = Valor, fill = Tipo)) +
  geom_histogram(position = "identity", bins = 30, alpha = 0.6) +
  facet_wrap(~Tipo) +
  labs(title = "Verificación de la propiedad aditiva de Poisson",
       subtitle = "Comparación entre suma de dos Poisson y Poisson(6.3)",
       x = "Valor observado",
       y = "Frecuencia") +
  theme_minimal()

```

```{r}
# c)  Extienda la verificación a la suma de 4 variables Poisson independientes

# Generar 4 variables independientes
X3 <- rpois(n, lambda = 1.2)
X4 <- rpois(n, lambda = 4.1)

# Suma total
Suma_4 <- X1 + X2 + X3 + X4
X_directa_4 <- rpois(n, lambda = 11.6)  # 3.5 + 2.8 + 1.2 + 4.1

# Estadísticas
cat("\n--- Suma de 4 variables ---\n")
cat("Media suma:", round(mean(Suma_4), 4), "\n")
cat("Varianza suma:", round(var(Suma_4), 4), "\n")

cat("Media Poisson(11.6):", round(mean(X_directa_4), 4), "\n")
cat("Varianza Poisson(11.6):", round(var(X_directa_4), 4), "\n")

```


:::

::: {#exr-aplicacion_web}
Un sitio web recibe en promedio 15 visitantes por minuto durante las horas pico. El servidor puede manejar hasta 25 solicitudes simultáneas sin degradación del rendimiento.

**Análisis requerido:**

a)  ¿Cuál es la probabilidad de que en un minuto el servidor experimente degradación?

b)  Si se duplica la capacidad del servidor (50 solicitudes), ¿cómo cambia la probabilidad de degradación?

c)  ¿Cuál sería la capacidad óptima del servidor para que la probabilidad de degradación sea menor al 1%?

d)  Simule el comportamiento del servidor durante una hora (60 minutos) y calcule el porcentaje de tiempo con degradación.


```{r}
#| code-fold: true
#| label: analisis_servidor_poisson

# Parámetro de llegada promedio
lambda <- 15

# Capacidad actual del servidor
capacidad <- 25

# a) Probabilidad de degradación (más de 25 visitantes)
prob_degradacion <- 1 - ppois(capacidad, lambda)
cat("a) Probabilidad de degradación:", round(prob_degradacion, 4), "\n")

# b) Si se duplica la capacidad a 50
capacidad_doble <- 50
prob_degradacion_doble <- 1 - ppois(capacidad_doble, lambda)
cat("b) Probabilidad con capacidad duplicada:", round(prob_degradacion_doble, 6), "\n")

# c) Buscar capacidad óptima para que P(degradación) < 0.01
capacidad_optima <- min(which(1 - ppois(0:100, lambda) < 0.01))
cat("c) Capacidad óptima para <1% de degradación:", capacidad_optima, "\n")

# d) Simular 60 minutos de tráfico
set.seed(123)
minutos <- 60
trafico <- rpois(minutos, lambda)
degradacion_minuto <- trafico > capacidad
porcentaje_degradacion <- mean(degradacion_minuto) * 100
cat("d) Porcentaje de minutos con degradación:", round(porcentaje_degradacion, 2), "%\n")

```


:::


::: {#exr-inventarios}
Una tienda registra que el número de cierto producto vendido por día sigue una distribución Poisson con $\lambda = 8$.

**Problemas de optimización:**

a)  Si la tienda mantiene un inventario de 12 unidades al inicio del día, ¿cuál es la probabilidad de quedarse sin existencias?

b)  ¿Cuántas unidades debe tener para que la probabilidad de agotarse sea menor al 5%?

c)  Calcule el costo esperado diario si:

    -   Cada unidad no vendida cuesta \$2 mantenerla en inventario
    -   Cada venta perdida por falta de stock cuesta \$15
    -   El costo de adquisición es \$10 por unidad

d)  Determine el nivel óptimo de inventario que minimiza el costo total esperado.

```{r}
#| code-fold: true
#| label: optimizacion_inventario_poisson

# Parámetro de demanda diaria
lambda <- 8

# a) Probabilidad de quedarse sin existencias con 12 unidades
stock_a <- 12
prob_agotado_a <- 1 - ppois(stock_a, lambda)
cat("a) Probabilidad de quedarse sin existencias (stock = 12):", round(prob_agotado_a, 4), "\n")

# b) Buscar el mínimo stock para que la probabilidad de agotarse sea < 5%
stock_seguro <- min(which(1 - ppois(0:50, lambda) < 0.05))
cat("b) Stock mínimo para mantener P(agotado) < 5%:", stock_seguro, "\n")

# c) Cálculo de costo esperado diario para distintos niveles de inventario
# Parámetros de costo
costo_mantenimiento <- 2
costo_perdida <- 15
costo_adquisicion <- 10

# Función para calcular costo esperado
calcular_costo <- function(stock, lambda) {
  demanda <- 0:30
  prob <- dpois(demanda, lambda)
  
  ventas <- pmin(demanda, stock)
  sobrante <- pmax(stock - demanda, 0)
  perdida <- pmax(demanda - stock, 0)
  
  costo_total <- prob * (sobrante * costo_mantenimiento + perdida * costo_perdida + stock * costo_adquisicion)
  sum(costo_total)
}

# Calcular costos para inventarios de 5 a 20
niveles_stock <- 5:20
costos <- sapply(niveles_stock, calcular_costo, lambda = lambda)

# Mostrar tabla resumen
data.frame(
  Inventario = niveles_stock,
  Costo_Esperado = round(costos, 2)
)

```


```{r}

df_costos <- data.frame(
  Inventario = niveles_stock,
  Costo_Esperado = costos
)

ggplot(df_costos, aes(x = Inventario, y = Costo_Esperado)) +
  geom_line(color = "darkred", size = 1.2) +
  geom_point() +
  labs(title = "Costo esperado diario vs nivel de inventario",
       x = "Unidades en inventario",
       y = "Costo esperado (MXN)") +
  theme_minimal()

```







:::

